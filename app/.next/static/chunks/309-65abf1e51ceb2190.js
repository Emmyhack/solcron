(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[309],{6601:function(){},4980:function(e,t,o){"use strict";o.d(t,{SolCronProvider:function(){return v},A:function(){return g}});var n=o(7437),r=o(2265),i=o(8902),c=o(4024),l=o(5135);class a{async getJobs(){try{if(!this.provider)throw Error("Wallet not connected");return console.log("Fetching jobs from blockchain..."),[]}catch(e){return console.error("Failed to fetch jobs:",e),[]}}async createJob(e,t,o,n,r,i,c){try{if(!this.provider)throw Error("Wallet not connected");return"object"==typeof e&&"jobId"in e?console.log("Creating job on blockchain:",e):console.log("Creating job on blockchain:",{targetProgram:e,targetInstruction:t,triggerType:o,triggerParams:n,gasLimit:r,minBalance:i,initialFunding:c}),"job_".concat(Date.now())}catch(e){throw console.error("Failed to create job:",e),e}}async updateJob(e,t){try{if(!this.provider)throw Error("Wallet not connected");console.log("Updating job on blockchain:",e,t)}catch(e){throw console.error("Failed to update job:",e),e}}async deleteJob(e){try{if(!this.provider)throw Error("Wallet not connected");console.log("Deleting job on blockchain:",e)}catch(e){throw console.error("Failed to delete job:",e),e}}async getKeepers(){try{if(!this.provider)throw Error("Wallet not connected");return console.log("Fetching keepers from blockchain..."),[]}catch(e){return console.error("Failed to fetch keepers:",e),[]}}async registerKeeper(e){try{if(!this.provider)throw Error("Wallet not connected");return console.log("Registering keeper on blockchain with stake:",e),"txsig_".concat(Date.now(),"_").concat(Math.random().toString(36).substr(2,9))}catch(e){throw console.error("Failed to register keeper:",e),e}}async getExecutionHistory(e){try{if(!this.provider)throw Error("Wallet not connected");return console.log("Fetching execution history from blockchain...",{jobId:e}),[]}catch(e){return console.error("Failed to fetch execution history:",e),[]}}async getAllJobs(){return this.getJobs()}async getAllKeepers(){return this.getKeepers()}async getRegistryState(){try{if(!this.provider)throw Error("Wallet not connected");return console.log("Fetching registry state from blockchain..."),{totalJobs:0,activeJobs:0,totalKeepers:0,activeKeepers:0,totalExecutions:0,successfulExecutions:0,baseFee:.001,treasury:0,lastUpdated:new Date}}catch(e){throw console.error("Failed to get registry state:",e),e}}async getBalance(e){try{return await this.connection.getBalance(new c.PublicKey(e))/1e9}catch(e){return console.error("Failed to get balance:",e),0}}isConnected(){return null!==this.provider}getConnection(){return this.connection}constructor(e,t){if(this.provider=null,this.registryProgram=null,this.executionProgram=null,this.REGISTRY_PROGRAM_ID=new c.PublicKey("11111111111111111111111111111112"),this.EXECUTION_PROGRAM_ID=new c.PublicKey("11111111111111111111111111111112"),this.connection=e,t){this.provider=new l.Y7(e,t,{}),(0,l.fc)(this.provider);try{console.log("SolCron client initialized with wallet")}catch(e){console.warn("Failed to initialize programs:",e)}}}}async function s(e){try{let t=await e.getGenesisHash();if("5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d"===t)return"mainnet-beta";if("EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG"===t)return"devnet";if("4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY"===t)return"testnet";return"localnet"}catch(e){return console.warn("Failed to detect network, defaulting to devnet:",e),"devnet"}}var u=o(1065);let d=(0,r.createContext)(null);function v(e){let{children:t}=e,{connection:c,publicKey:l,connected:v}=(0,i.O)(),[g,p]=(0,r.useState)(null),[h,b]=(0,r.useState)(null),[f,w]=(0,r.useState)(!1),[y,E]=(0,r.useState)(null),{setJobs:x,setKeepers:m,setRegistry:k,setLoading:A,setError:j}=(0,u.Ln)();(0,r.useEffect)(()=>{v&&c&&l?S():(p(null),b(null))},[v,c,l]);let S=async()=>{try{var e;w(!0),E(null);let t=await s(c);b(t);let o=(e={publicKey:l,signTransaction:async e=>e,signAllTransactions:async e=>e},new a(c,e));p(o),await K(o)}catch(t){let e=t instanceof Error?t.message:"Failed to initialize SolCron client";E(e),j(e),console.error("Client initialization error:",t)}finally{w(!1)}},K=async e=>{let t=e||g;if(t)try{A(!0),j(null);let[e,o,n]=await Promise.all([t.getRegistryState().catch(e=>(console.warn("Failed to fetch registry state:",e),null)),t.getAllJobs().catch(e=>(console.warn("Failed to fetch jobs:",e),[])),t.getAllKeepers().catch(e=>(console.warn("Failed to fetch keepers:",e),[]))]);if(e){let t={totalJobs:e.totalJobs||0,activeJobs:e.activeJobs||0,totalKeepers:e.totalKeepers||0,activeKeepers:e.activeKeepers||0,totalExecutions:e.totalExecutions||0,successfulExecutions:e.successfulExecutions||0,protocolRevenue:e.protocolRevenue||0,baseFee:e.baseFee||0,protocolFeeBps:e.protocolFeeBps||0,minStake:e.minStake||0,nextJobId:e.nextJobId||0};k(t)}let r=o.map((e,t)=>{var o,n,r,i,c,l,a,s,u,d,v,g,p,h,b,f;return{jobId:(null===(o=e.account)||void 0===o?void 0:o.jobId)||"job_".concat(t),owner:(null===(r=e.account)||void 0===r?void 0:null===(n=r.owner)||void 0===n?void 0:n.toString())||"",targetProgram:(null===(c=e.account)||void 0===c?void 0:null===(i=c.targetProgram)||void 0===i?void 0:i.toString())||"",targetInstruction:(null===(l=e.account)||void 0===l?void 0:l.targetInstruction)||"",trigger:{type:(null===(a=e.account)||void 0===a?void 0:a.triggerType)||"time-based",interval:300},gasLimit:(null===(s=e.account)||void 0===s?void 0:s.gasLimit)||2e5,balance:(null===(u=e.account)||void 0===u?void 0:u.balance)||0,minBalance:(null===(d=e.account)||void 0===d?void 0:d.minBalance)||1e7,isActive:null===(f=null===(v=e.account)||void 0===v?void 0:v.isActive)||void 0===f||f,executionCount:(null===(g=e.account)||void 0===g?void 0:g.executionCount)||0,lastExecution:(null===(p=e.account)||void 0===p?void 0:p.lastExecution)||Date.now(),createdAt:(null===(h=e.account)||void 0===h?void 0:h.createdAt)||Date.now(),updatedAt:(null===(b=e.account)||void 0===b?void 0:b.updatedAt)||Date.now()}});x(r);let i=n.map((e,t)=>{var o,n,r,i,c,l,a,s,u,d,v;return{address:(null===(o=e.publicKey)||void 0===o?void 0:o.toString())||"keeper_".concat(t),stakeAmount:(null===(n=e.account)||void 0===n?void 0:n.stakeAmount)||0,reputationScore:(null===(r=e.account)||void 0===r?void 0:r.reputationScore)||0,isActive:null===(v=null===(i=e.account)||void 0===i?void 0:i.isActive)||void 0===v||v,totalExecutions:(null===(c=e.account)||void 0===c?void 0:c.totalExecutions)||0,successfulExecutions:(null===(l=e.account)||void 0===l?void 0:l.successfulExecutions)||0,totalEarnings:(null===(a=e.account)||void 0===a?void 0:a.totalEarnings)||0,pendingRewards:(null===(s=e.account)||void 0===s?void 0:s.pendingRewards)||0,lastExecutionTime:(null===(u=e.account)||void 0===u?void 0:u.lastExecutionTime)||Date.now(),registeredAt:(null===(d=e.account)||void 0===d?void 0:d.registeredAt)||Date.now()}});m(i)}catch(e){j(e instanceof Error?e.message:"Failed to refresh data"),console.error("Data refresh error:",e)}finally{A(!1)}},F=(0,r.useCallback)(async()=>{if(g)try{let e=(await g.getAllJobs()).map((e,t)=>{var o,n,r,i,c,l,a,s,u,d,v,g,p,h,b,f;return{jobId:(null===(o=e.account)||void 0===o?void 0:o.jobId)||"job_".concat(t),owner:(null===(r=e.account)||void 0===r?void 0:null===(n=r.owner)||void 0===n?void 0:n.toString())||"",targetProgram:(null===(c=e.account)||void 0===c?void 0:null===(i=c.targetProgram)||void 0===i?void 0:i.toString())||"",targetInstruction:(null===(l=e.account)||void 0===l?void 0:l.targetInstruction)||"",trigger:{type:(null===(a=e.account)||void 0===a?void 0:a.triggerType)||"time-based",interval:300},gasLimit:(null===(s=e.account)||void 0===s?void 0:s.gasLimit)||2e5,balance:(null===(u=e.account)||void 0===u?void 0:u.balance)||0,minBalance:(null===(d=e.account)||void 0===d?void 0:d.minBalance)||1e7,isActive:null===(f=null===(v=e.account)||void 0===v?void 0:v.isActive)||void 0===f||f,executionCount:(null===(g=e.account)||void 0===g?void 0:g.executionCount)||0,lastExecution:(null===(p=e.account)||void 0===p?void 0:p.lastExecution)||Date.now(),createdAt:(null===(h=e.account)||void 0===h?void 0:h.createdAt)||Date.now(),updatedAt:(null===(b=e.account)||void 0===b?void 0:b.updatedAt)||Date.now()}});x(e)}catch(e){console.error("Failed to refresh jobs:",e)}},[g,x]),J=(0,r.useCallback)(async()=>{if(g)try{let e=(await g.getAllKeepers()).map((e,t)=>{var o,n,r,i,c,l,a,s,u,d,v;return{address:(null===(o=e.publicKey)||void 0===o?void 0:o.toString())||"keeper_".concat(t),stakeAmount:(null===(n=e.account)||void 0===n?void 0:n.stakeAmount)||0,reputationScore:(null===(r=e.account)||void 0===r?void 0:r.reputationScore)||0,isActive:null===(v=null===(i=e.account)||void 0===i?void 0:i.isActive)||void 0===v||v,totalExecutions:(null===(c=e.account)||void 0===c?void 0:c.totalExecutions)||0,successfulExecutions:(null===(l=e.account)||void 0===l?void 0:l.successfulExecutions)||0,totalEarnings:(null===(a=e.account)||void 0===a?void 0:a.totalEarnings)||0,pendingRewards:(null===(s=e.account)||void 0===s?void 0:s.pendingRewards)||0,lastExecutionTime:(null===(u=e.account)||void 0===u?void 0:u.lastExecutionTime)||Date.now(),registeredAt:(null===(d=e.account)||void 0===d?void 0:d.registeredAt)||Date.now()}});m(e)}catch(e){console.error("Failed to refresh keepers:",e)}},[g,m]),C=(0,r.useCallback)(async()=>{if(g)try{let e=await g.getRegistryState();if(e){let t={totalJobs:e.totalJobs||0,activeJobs:e.activeJobs||0,totalKeepers:e.totalKeepers||0,activeKeepers:e.activeKeepers||0,totalExecutions:e.totalExecutions||0,successfulExecutions:e.successfulExecutions||0,protocolRevenue:e.protocolRevenue||0,baseFee:e.baseFee||0,protocolFeeBps:e.protocolFeeBps||0,minStake:e.minStake||0,nextJobId:e.nextJobId||0};k(t)}}catch(e){console.error("Failed to refresh registry:",e)}},[g,k]),R=(0,r.useCallback)(async e=>{if(!g)throw Error("SolCron client not initialized");try{A(!0);let t=new(await Promise.resolve().then(o.bind(o,4024))).PublicKey(e.targetProgram),n=new TextEncoder().encode(JSON.stringify(e.triggerParams||{})),r=await g.createJob(t,e.targetInstruction,e.triggerType,n,e.gasLimit,e.minBalance,e.initialFunding);return await F(),r}finally{A(!1)}},[g,F,A]),P=(0,r.useCallback)(async e=>{if(!g)throw Error("SolCron client not initialized");try{A(!0);let t=await g.registerKeeper(e);return await J(),t}finally{A(!1)}},[g,J,A]);return(0,n.jsx)(d.Provider,{value:{client:g,network:h,loading:f,error:y,refreshAll:()=>K(),refreshJobs:F,refreshKeepers:J,refreshRegistry:C,createJob:R,registerKeeper:P},children:t})}function g(){let e=(0,r.useContext)(d);if(!e)throw Error("useSolCron must be used within a SolCronProvider");return e}},8902:function(e,t,o){"use strict";o.d(t,{O:function(){return y},WalletContextProvider:function(){return w},a:function(){return v.a}});var n=o(7437),r=o(2265),i=o(4024),c=o(6454),l=o(3816),a=o(5408),s=o(4968),u=o(4698),d=o(2948),v=o(2596),g=o(4298),p=o(1867),h=o(5566);o(2060);let b=(0,r.createContext)(null);function f(e){let{children:t}=e,{connection:o}=(0,l.R)(),{publicKey:i,connected:s,connecting:u,signTransaction:d,signAllTransactions:v,sendTransaction:g}=(0,a.O)(),[p,h]=(0,r.useState)(0),f=async()=>{if(i&&o)try{let e=await o.getBalance(i);h(e)}catch(e){console.error("Failed to fetch balance:",e)}};(0,r.useEffect)(()=>{f()},[i,o]),(0,r.useEffect)(()=>{if(s&&i){let e=setInterval(f,3e4);return()=>clearInterval(e)}},[s,i]);let w={connected:s,publicKey:i,balance:p,connecting:u,connection:o,signTransaction:d,signAllTransactions:v,sendTransaction:g,refreshBalance:f,network:c.Q.Mainnet};return(0,n.jsx)(b.Provider,{value:w,children:t})}function w(e){let{children:t}=e,o=c.Q.Mainnet,l=(0,r.useMemo)(()=>h.env.NEXT_PUBLIC_RPC_URL||(0,i.clusterApiUrl)(o),[o]),a=(0,r.useMemo)(()=>[new g.O,new p.e],[]);return(0,n.jsx)(s.U,{endpoint:l,children:(0,n.jsx)(u.n,{wallets:a,autoConnect:!0,children:(0,n.jsx)(d.s,{children:(0,n.jsx)(f,{children:t})})})})}function y(){let e=(0,r.useContext)(b);if(!e)throw Error("useWallet must be used within a WalletProvider");return e}},1065:function(e,t,o){"use strict";o.d(t,{Ln:function(){return i}});var n=o(9625),r=o(6885);let i=(0,n.Ue)()((0,r.XR)((e,t)=>({jobs:[],keepers:[],registry:null,metrics:null,recentExecutions:[],loading:!1,error:null,selectedJob:null,selectedKeeper:null,setJobs:t=>e({jobs:t}),addJob:t=>e(e=>({jobs:[...e.jobs,t]})),updateJob:(t,o)=>e(e=>({jobs:e.jobs.map(e=>e.jobId===t?{...e,...o}:e)})),removeJob:t=>e(e=>({jobs:e.jobs.filter(e=>e.jobId!==t)})),setKeepers:t=>e({keepers:t}),addKeeper:t=>e(e=>({keepers:[...e.keepers,t]})),updateKeeper:(t,o)=>e(e=>({keepers:e.keepers.map(e=>e.address===t?{...e,...o}:e)})),removeKeeper:t=>e(e=>({keepers:e.keepers.filter(e=>e.address!==t)})),setRegistry:t=>e({registry:t}),setMetrics:t=>e({metrics:t}),setRecentExecutions:t=>e({recentExecutions:t.slice(0,100)}),addExecution:t=>e(e=>({recentExecutions:[t,...e.recentExecutions].slice(0,100)})),setLoading:t=>e({loading:t}),setError:t=>e({error:t}),setSelectedJob:t=>e({selectedJob:t}),setSelectedKeeper:t=>e({selectedKeeper:t}),getJobById:e=>{let{jobs:o}=t();return o.find(t=>t.jobId===e)},getKeeperByAddress:e=>{let{keepers:o}=t();return o.find(t=>t.address===e)},getActiveJobs:()=>{let{jobs:e}=t();return e.filter(e=>e.isActive)},getActiveKeepers:()=>{let{keepers:e}=t();return e.filter(e=>e.isActive)},getTotalBalance:()=>{let{jobs:e}=t();return e.reduce((e,t)=>e+t.balance,0)},getSuccessRate:()=>{let{registry:e}=t();return e&&0!==e.totalExecutions?e.successfulExecutions/e.totalExecutions*100:100}})))}}]);